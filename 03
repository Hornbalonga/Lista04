# include  < stdio.h >
# include  < stdlib.h >
# inclui  < string.h >

typedef struct lista{
    char str[ 100 ];
}Lista;



void  inserir (Lista *l, int *c) {
    printf( " insira uma string: " );
    fflush(stdin);
    get(l[*c]. str );
    (*c)++;
    return;
}

removedor de void(Lista *l, int *c) {
    char str[ 100 ];
    printf("String: ");
    fflush(stdin);
    get(str);
    for( int i = 0 ; i <= *c; i++) {
        teste int ;
        teste = strcmp (l[i]. str , str);
        if (teste == 0 ) {
            strcpy (l[i]. str , l[i + 1 ]. str );
            for ( int j = i; j < (*c) - 1 ; j++){
                strcpy (l[j]. str , l[j + 1 ]. str );
            }
            (*c)--;
            return;
        }
    }
    printf("String não encontrada!\n");
    return ;
}
void  buscar(Lista *l, int *c){
    char str[ 100 ];
    printf("string: ");
    fflush(stdin);
    get(str);

    for( int i = 0 ; i < (*c); i++){
        teste int ;
        teste = strcmp (l[i]. str , str);
        if(teste == 0 ){
            print("%s \n\n", l[i].str);
        }
    }
    printf("String não encontrada!\n");
     return;
}
void  editar(Lista *l, int *c){
    char str[ 100 ];
    printf( " string: " );
    fflush(stdin);
    get(str);
    for( int i = 0 ; i < (*c); i++) {
        teste int ;
        teste = strcmp (l[i]. str , str);
        if(teste == 0 ){
            char nstr[ 100 ];
            printf( " string: " );
            fflush(stdin);
            get(nstr);
            strcpy (l[i]. str , nstr);
            return;
        }
        printf("String não encontrada!\n");
        return;
    }
}
int  principal() {
    Lista l[ 50 ];
    int c = 0 , op;
    do{
        printf("_________________\n");
        printf("LISTA DE STRINGS\n");
        printf("_________________\n");
        printf(" 1-Inserir\n 2-Remover\n 3-Mostrar\n 4-Buscar\n 5-Editar\n 6-Total\n Escolha uma opção: " );
        scanf(" %d " , &op);
        switch(op){
            case  1 :
                inserir(&l, &c);
            break ;
            case  2 :
                removedor(&l, &c);
            break ;
            case  3 :
            for( int i = 0 ; i < c; i++) {
                printf( " %s \n\n " , l[i]. str );
                }
            break;
            caso  4 :
                buscar(&l, &c);
            quebrar ;
            case  5 :
                editar(&l, &c);
            break;
            case  6 :
                printf("%d strings cadastradas!\n %d perda de memoria!\n", c,( sizeof (l) - sizeof (c)*c));
            break;
            default:
            break;
        }
    }while (op > 0 );
 
}
